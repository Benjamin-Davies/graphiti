{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/equation-ast.ts","webpack:///src/app/equation-panel/equation-panel.component.ts","webpack:///src/app/equation-panel/equation-panel.component.html","webpack:///src/app/equation.ts","webpack:///src/app/equations.service.ts","webpack:///src/app/exec-equation.service.ts","webpack:///src/app/graph-view/graph-view.component.ts","webpack:///src/app/graph-view/graph-view.component.html","webpack:///src/app/parser.utils.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","EquationAst","rootNode","str","res","pEquation","parse","isOk","value","console","warn","pNumber","pipe","digits","type","parseInt","join","pPronumeral","pSubExpression","pSign","pTerm","sign","children","pProduct","pSum","EquationPanelComponent","equations","addEquation","newEquation","Equation","_text","_ast","updates","text","next","EquationsService","_equations","arrayUpdates","equation","newEquations","Array","from","push","a","map","x","providedIn","ExecEquationService","context","ast","exps","slice","expression","pop","resultKeys","exp","length","result","evalNode","resultCtx","key","node","reduce","sum","prod","NaN","GraphViewComponent","execEquation","ctxCache","subCache","resize","window","subscribe","render","unsubscribe","ctx","width","canvas","clientWidth","height","clientHeight","clearRect","strokeStyle","beginPath","sx","y","sy","lineTo","stroke","nativeElement","getContext","multiple","p","b","multipleSepBy","separator","_","singleOrMap","f","arr","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.styl']\n})\nexport class AppComponent {}\n","<app-equation-panel></app-equation-panel>\n<app-graph-view></app-graph-view>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { EquationPanelComponent } from './equation-panel/equation-panel.component';\nimport { GraphViewComponent } from './graph-view/graph-view.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    EquationPanelComponent,\n    GraphViewComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Parjser, digit, anyCharOf, letter } from 'parjs';\nimport { map, maybe, then, or } from 'parjs/combinators';\n\nimport { multiple, multipleSepBy, singleOrMap } from './parser.utils';\n\nexport class EquationAst {\n  constructor(public readonly rootNode: EquationNode) {}\n\n  public static parse(str: string): EquationAst | null {\n    const res = pEquation.parse(str);\n    if (res.isOk) {\n      return new EquationAst(res.value);\n    } else {\n      console.warn(res.value);\n      return null;\n    }\n  }\n}\n\nexport interface AstNode {\n  type: string;\n  value?: string | number;\n  children?: AstNode[];\n}\n\nexport interface NumberNode extends AstNode {\n  type: 'number',\n  value: number,\n}\nconst pNumber: Parjser<NumberNode> = digit(10).pipe(\n  multiple(),\n  map(digits => ({ type: 'number', value: parseInt(digits.join('')) })),\n);\n\nexport interface PronumeralNode extends AstNode {\n  type: 'pronumeral',\n  value: string,\n}\nconst pPronumeral: Parjser<PronumeralNode> = letter().pipe(\n  map(value => ({ type: 'pronumeral', value })),\n);\n\nexport type SubExpressionNode = NumberNode | PronumeralNode;\nconst pSubExpression: Parjser<SubExpressionNode> = or<PronumeralNode, NumberNode>(pNumber)(pPronumeral);\n\nexport type Sign = '+' | '-';\nconst pSign: Parjser<Sign> = maybe<Sign, '+'>('+')(anyCharOf('+-') as Parjser<Sign>);\n\nexport interface TermNode extends AstNode {\n  type: 'term',\n  sign: Sign,\n  children: SubExpressionNode[],\n}\nconst pTerm: Parjser<TermNode> = pSign.pipe(\n  then(pSubExpression.pipe(\n    multiple(),\n  )),\n  map(([sign, children]) => ({ type: 'term', sign, children })),\n);\n\nexport interface ProductNode extends AstNode {\n  type: 'product',\n  children: TermNode[],\n}\nconst pProduct: Parjser<ExpressionNode> = pTerm.pipe(\n  multipleSepBy('*'),\n  singleOrMap(children => ({ type: 'product', children })),\n);\n\nexport interface SumNode extends AstNode {\n  type: 'sum',\n  children: ExpressionNode[],\n}\nconst pSum: Parjser<ExpressionNode> = pProduct.pipe(\n  multiple(),\n  singleOrMap(children => ({ type: 'sum', children }))\n);\n\nexport type ExpressionNode = SumNode | ProductNode | TermNode;\n\nexport interface EquationNode extends AstNode {\n  type: 'equation',\n  children: ExpressionNode[],\n}\nconst pEquation: Parjser<EquationNode> = pSum.pipe(\n  multipleSepBy('='),\n  map(children => ({ type: 'equation', children })),\n);\n","import { Component, OnInit } from '@angular/core';\n\nimport { Equation } from '../equation';\nimport { EquationsService } from '../equations.service';\n\n@Component({\n  selector: 'app-equation-panel',\n  templateUrl: './equation-panel.component.html',\n  styleUrls: ['./equation-panel.component.styl']\n})\nexport class EquationPanelComponent {\n\n  constructor(public equations: EquationsService) {}\n\n  newEquation() {\n    this.equations.addEquation(new Equation());\n  }\n\n}\n","<h1>Graphiti</h1>\n\n<p *ngFor=\"let equation of equations.equations\">\n  <input [(ngModel)]=\"equation.text\" autofocus>\n</p>\n\n<p>\n  <button (click)=\"newEquation()\">New Equation</button>\n</p>\n","import { EquationAst } from './equation-ast';\nimport { Subject } from 'rxjs';\n\nexport class Equation {\n\n  private _text: string = '';\n  private _ast: EquationAst | null = null;\n\n  public readonly updates = new Subject<Equation>();\n\n  public get text(): string {\n    return this._text;\n  }\n  public set text(text: string) {\n    this._ast = EquationAst.parse(text);\n    this._text = text;\n\n    this.updates.next(this);\n  }\n\n  public get ast(): EquationAst | null {\n    return this._ast;\n  }\n\n  constructor() {}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, merge, Observable, OperatorFunction, scheduled, of } from 'rxjs';\nimport { switchMap, startWith, map, mergeMap } from 'rxjs/operators';\n\nimport { Equation } from './equation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EquationsService {\n\n  private _equations: readonly Equation[] = [];\n\n  public readonly arrayUpdates = new Subject<readonly Equation[]>();\n  public get updates(): Observable<Equation | readonly Equation[]> {\n    return this.arrayUpdates.pipe(\n      startWith(this.equations),\n      switchMap(a => of(\n        ...a.map(e => e.updates),\n      ).pipe(\n        mergeMap(x=>x),\n        startWith(a)\n      ))\n    )\n  }\n\n  public get equations(): readonly Equation[] {\n    return this._equations;\n  }\n  public set equations(equations: readonly Equation[]) {\n    this._equations = equations;\n\n    this.arrayUpdates.next(equations);\n  }\n\n  addEquation(equation: Equation) {\n    const newEquations = Array.from(this.equations);\n    newEquations.push(equation);\n    this.equations = newEquations;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Equation } from './equation';\nimport { AstNode, NumberNode, TermNode } from './equation-ast';\n\nexport interface Context {\n  [key: string]: number;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ExecEquationService {\n\n  constructor() { }\n\n  execEquation(equation: Equation, context: Context): Context {\n    const rootNode = equation.ast?.rootNode;\n    if (!rootNode) {\n      return {};\n    }\n\n    // Extract the parts\n    const exps = rootNode.children.slice();\n    const expression = exps.pop();\n\n    // TODO: replace with inverse functionality\n    // Get the result variables\n    const resultKeys = [];\n    for (const exp of exps) {\n      if (exp.type === 'term' && exp.children.length === 1 && exp.children[0].type === 'pronumeral') {\n        resultKeys.push(exp.children[0].value);\n      }\n    }\n    if (resultKeys.length === 0) {\n      resultKeys.push('y');\n    }\n\n    // Evaluate the expression\n    const result = this.evalNode(expression, context);\n\n    // Create the resultant context\n    const resultCtx = {};\n    for (const key of resultKeys) {\n      resultCtx[key] = result;\n    }\n\n    return resultCtx;\n  }\n\n  evalNode(node: AstNode, context: Context): number {\n    switch (node.type) {\n      case 'expression':\n        return node.children.reduce((sum, exp) => sum + this.evalNode(exp, context), 0);\n      case 'product':\n        return node.children.reduce((prod, exp) => prod * this.evalNode(exp, context), 1);\n      case 'term':\n        return ((node as TermNode).sign === '-' ? -1 : 1)\n          * node.children.reduce((prod, exp) => prod * this.evalNode(exp, context), 1);\n      case 'pronumeral':\n        return context[node.value] ?? NaN;\n      case 'number':\n        return (node as NumberNode).value;\n      default:\n        throw `IDK ${node.type}`;\n    }\n  }\n\n}\n","import { Component, AfterViewInit, ViewChild, ElementRef, OnInit, OnDestroy } from '@angular/core';\nimport { Subscription, merge, fromEvent } from 'rxjs';\n\nimport { ExecEquationService } from '../exec-equation.service';\nimport { EquationsService } from '../equations.service';\n\n@Component({\n  selector: 'app-graph-view',\n  templateUrl: './graph-view.component.html',\n  styleUrls: ['./graph-view.component.styl']\n})\nexport class GraphViewComponent implements AfterViewInit, OnInit, OnDestroy {\n\n  @ViewChild('canvas') canvas: ElementRef<HTMLCanvasElement>;\n\n  ctxCache: CanvasRenderingContext2D | null = null;\n  get ctx(): CanvasRenderingContext2D {\n    if (this.ctxCache?.canvas !== this.canvas?.nativeElement) {\n      this.ctxCache = this.canvas.nativeElement.getContext('2d');\n    }\n    return this.ctxCache;\n  }\n\n  constructor(private equations: EquationsService, private execEquation: ExecEquationService) { }\n\n  subCache: Subscription | null = null;\n  ngOnInit(): void {\n    const resize = fromEvent(window, 'resize');\n    const updates = merge(this.equations.updates, resize);\n    this.subCache = updates.subscribe({ next: () => this.render() })\n  }\n\n  ngAfterViewInit(): void {\n    this.render();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subCache) {\n      this.subCache.unsubscribe();\n      this.subCache = null;\n    }\n  }\n\n  render(): void {\n    const ctx = this.ctx;\n    if (!ctx) return;\n    const width = ctx.canvas.width = ctx.canvas.clientWidth;\n    const height = ctx.canvas.height = ctx.canvas.clientHeight;\n\n    ctx.clearRect(0, 0, width, height);\n\n    for (const equation of this.equations.equations) {\n      ctx.strokeStyle = 'black';\n      ctx.beginPath();\n      for (let sx = 0; sx < width; sx += 5) {\n        const x = 6 * (sx / width) - 3;\n        const { y } = this.execEquation.execEquation(equation, { x });\n        const sy = (-y / 6 + 0.5) * height;\n        ctx.lineTo(sx, sy);\n      }\n      ctx.stroke();\n    }\n  }\n\n}\n","<canvas #canvas></canvas>\n","import { many, then, map } from 'parjs/combinators';\nimport { ParjsCombinator, ImplicitParjser } from 'parjs';\n\nexport function multiple<T>(): ParjsCombinator<T, T[]> {\n  return p =>\n  (map (([a, b]) => [a, ...b])\n       (then\n        (many () (p))\n        (p)))\n}\n\nexport function multipleSepBy<T>(separator: ImplicitParjser<unknown>): ParjsCombinator<T, T[]> {\n  return p =>\n  (map (([a, b]) =>\n        [a, ...b.map(([_, x]) => x)])\n       (then\n        (many\n         ()\n         (then (p) (separator)))\n        (p)))\n}\n\nexport function singleOrMap<A, B>(f: (arr: A[]) => B): ParjsCombinator<A[], A | B> {\n  return map(arr => arr.length === 1 ? arr[0] : f(arr));\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}